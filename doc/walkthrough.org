* Walkthrough

Here is the quick walkthrough for the program study: Localized stable
diffusion editor (SdEditor) starting from scratch.

Better view in emacs org mode

* Setup

- Pull the repo and go to the root directory

   #+begin_quote bash
   git clone git@gitlab.com:gladiator8072/conditioned-diffusion.git && cd conditioned-diffusion
   #+end_quote

- Make sure you expose the graphics card in the shell.

   #+begin_quote bash
   export CUDA_VISIBLE_DEVICES="0,1"
   #+end_quote

- Install diffusers and pytorch

   pytorch should be easy to follow on the offical web.
   for diffusers:
   #+begin_quote bash
   pip install diffusers
   #+end_quote

- Install diffusion/clip model

  You could either follow the guide to install the models through
  scripts/install-model.sh as described in the repo README. Or install them
  randomly, however, you need then to give the model path to the flag *-dp* and
  *-cp*.

  the default paths of them in the executable program are
  - CLIP: ``assets/models/clip-vit-large-patch14''
  - Diffusion: ``assets/models/stable-diffusion-v1-4''

- Try to run the SdEditor command help
  #+begin_quote bash
  python ./bin/SdEditorCmd.py --help
  #+end_quote

  If you successfully see the help description then 99% it should be good now.

* SdEditor Command Explain

Here is the command for all the essential materials to run SdEditor
#+begin_src bash :results output
  python ./bin/SdEditorCmd.py \
         -p "A tiger sitting a on car in the city" \
         -roi "0.0,0.5,0.0,1.0" -ei "1,2" -nt "20"  -s "1.0" \
         -ns 5 -ds 50 \
         -m -is -n "Test" \
         -dp "path to diffusion model" \
         -cp "path to clip model" \
         -f "output/folder"
#+end_src
and we breifly instruct the usage of the arguments

** SD Basic

Basic arguments
#+begin_src bash
  -p "A tiger sitting a on car in the city" # prompt
  -ds 50 # diffusion steps
  -cp "..." # default: assets/models/clip-vit-large-patch14
  -dp "..." # default: assets/models/stable-diffusion-v1-4
#+end_src

Others, will be explained later
#+begin_src bash
  -m # to draw the metadata on the image
  -is # to show image right away after each run
  -n "Note" # user note
#+end_src

Some flags can be redundant, the minimum command without using any features and
following the model installation guide, it will be
#+begin_quote bash
  python ./bin/SdEditorCmd.py \
         -p "A tiger sitting a on car in the city" \
         -roi "0.0,0.5,0.0,1.0" -ei "1,2" -nt "20"  -s "1.0" \
         -ns 5
#+end_quote

** SdEditor specific

*** Basic

Number of steps using regioning algorithm. 5 means the program will apply 5
steps on diffusion process starting from n to n-5 (Following the convention Xn
is noise, X0 is image)
#+begin_src bash
-ns 5
#+end_src

*** Region

*Single region*
#+begin_src bash
-roi "0.0,0.5,0.0,1.0" # region of interests
-ei "1,2" # the word indices of the prompt associated with particular region
-nt "20" # the number of trailing attention used in SdEditor in region
-s "1.0" # the gaussian noise level on the region
#+end_src

*Two regions*
#+begin_quote bash
-roi "0.4,0.7,0.1,0.5", "0.4,0.7,0.5,0.9"
-ei "2,3" "8,9"
-nt "10,10"
-s "1.0,1.0"
#+end_quote

Note that *-roi* and *-ei* are a list of strings containing the information
associated with each region. Each string has a number of float(s)/int(s) to
describe the region (left, right, top, bottom), and the word indices of the
prompt, respectively.

The flags *-nt* and *-s* are using string only as each float/int describes the
number of trailing attention and the noise scale associated with the region.

Be careful the program uses comma as the separator, and no spaces in the string
arguments.



** SdEditor example

*** single region

The yellow car should be at the top-right corner
#+begin_quote bash
python ./bin/SdEditorCmd.py -roi "0.5,1.0,0.0,0.5" -ei "1,2,3" -nt "10" -s "2.0" -ns 15 -p "A yellow car on a bridge" -m
#+end_quote

*** multiple regions

It will create a cube and a sphere where the cube should sit on the sphere ideally
#+begin_quote bash
python ./bin/SdEditorCmd.py -roi "0.4,0.7,0.1,0.5" "0.4,0.7,0.5,0.9" -ei "2,3" "8,9" -nt "30,30" -ns 10 -s "1.0,1.0" -p "A red cube on top of a blue sphere" -m -sd 2483964026830
#+end_quote

** Grid search

Sometimes it's quite painful to load the neural network model such as diffusion
and the clip. It becomes a headache if we have a loads of experiments only for
one task.

Here we offer a grid search way for the following list of arguments:
 #+begin_quote bash
--num-trailing-attn (-nt)
--noise-scale(-s)
--num-affected-steps(-ns)
--diffusion-steps (-ds)
 #+end_quote

Just put additional value in the argument separated by space will be
sufficient. For instance:

  #+begin_quote bash
  -nt "10,10" "15,15"
  -s "0.1,0.5" "0.3,0.1"
  -ns 5 10
  -ds 50 70
  #+end_quote

We want to run the program with all combination (aka, Cartesian product) of the
given arguments. In this 2 regions example, we want to search number of trailing
"10,10" and "15,15", the noise level "0.1,0.5" and "0.3,0.1", the number of
SdEditor affected step 5, 10, and finally the total number of diffusion steps
50, 70.

Then in total there will be pow(2,4)=16 runs for a single command execution.

All the result will be saved in an created subfolder under the given --folder


** Grid search example

#+begin_quote bash
python ./bin/SdEditorCmd.py -roi "0.5,1.0,0.0,0.5" -ei "1,2,3" -nt 5 10 20 -ns 5 10 -s 2.5 -p "A yellow car running on a bridge" -m
#+end_quote

* SdEditor API
